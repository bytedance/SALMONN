namespace go tiktok.content.video

include "common.thrift"
include "enum.thrift"

struct BigThumbStruct {
	1: optional i64 ImgNum;
	// Uri; use img_uris instead
	2: optional string Uri;
	// ImgUrl; use img_urls instead
	3: optional string ImgUrl;
	4: optional i64 ImgXSize;
	5: optional i64 ImgYSize;
	6: optional i64 ImgXLen;
	7: optional i64 ImgYLen;
	8: optional double Duration;
	9: optional double Interval;
	10: optional string Fext;
	// all sprite uris with same size
	11: optional list<string> ImgUris;
	// all sprite urls with same size
	12: optional list<string> ImgUrls;
}

struct BitrateUrlStruct {
	// Main playback url
	1: optional string MainUrl;
	// Backup playback url
	2: optional string BackupUrl;
	// Fallback url
	3: optional string FallbackUrl;
}

struct BitrateMetaStruct {
	// Play address
	1: optional BitrateUrlStruct UrlList;
	// Whether it is encrypted and the encryption method
	2: optional string EncodedType;
	// Media type
	3: optional string MediaType;
	// Watermark name
	4: optional string LogoType;
	// Resolution
	5: optional string Definition;
	// Quality level
	6: optional string Quality;
	// Quality description information
	7: optional string QualityDesc;
	// Format
	8: optional string Format;
	// Width
	9: optional i64 Width;
	// Height
	10: optional i64 Height;
	// Bit rate
	11: optional i64 Bitrate;
	// Encoder type
	12: optional string CodecType;
	// Size
	13: optional i64 Size;
	// Frame rate
	14: optional i64 FPS;
	// Unique identifier
	15: optional string FileId;
	// Hash unique identifier
	16: optional string FileHash;
	// Fields passed through to the VOD SDK
	17: optional string SubInfo;
	// ABR bitrate
	18: optional i64 Bandwidth;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.VideoPlay.BitrateAudioInfos.AudioMeta.FidProfileLabels - Fid/Ladder Level Portrait
	19: optional string FidProfileLabels;
}

struct BitrateAudioStruct {
	// Audio metadata
	1: optional BitrateMetaStruct AudioMeta;
	// Audio quality
	2: optional i64 AudioQuality;
	// Audio extra information, json string
	3: optional string AudioExtra;
}

struct CLACaptionPosition {
	1: optional list<double> Vertical;
	2: optional double Horizontal;
}

struct CLACaptionStruct {
	// the language name from video arch subtitle management system
	1: optional string Lang;
	// map<lang, language_id> is maintained by vcloud. https://bytedance.feishu.cn/docs/doccnL3XBAihnFwawShre7pjgyh
	2: optional i64 LanguageId;
	3: optional string Url;
	// CDN expiration time
	4: optional i64 Expire;
	// default "webvtt"
	5: optional string CaptionFormat = "webvtt";
	// used by tns to process complaints
	6: optional i64 ComplaintId;
	7: optional bool IsAutoGenerated = true;
	// video subtitle id from video arch
	8: optional i64 SubID;
	// video subtitle version from video arch
	9: optional string SubVersion;
	// video subtitle id from cla
	10: optional i64 ClaSubtitleId;
	// video subtitle translator id from cla
	11: optional i64 TranslatorId;
	// the language code from lab which aligned with translation language
	12: optional string LanguageCode;
	// determine if the caption is original or translation
	13: optional bool IsOriginalCaption;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.Cla.CaptionInfos.UrlList - The list of caption urls with major, backup and 302 redirect
	14: optional list<string> UrlList;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.Cla.CaptionInfos.CaptionLength - The length of caption, determined by len(record.Extra) when caption is generated
	15: optional i64 CaptionLength;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.Cla.CaptionInfos.Variant - caption language model
	16: optional string Variant;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.Cla.CaptionInfos.SubtitleType - Subtitle Type
	17: optional i64 SubtitleType;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.Cla.CaptionInfos.SourceTag - This field stores the caption triggering source
	18: optional string SourceTag;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.Cla.CaptionInfos.TranslationType - This field indicates the type of current translated caption
	19: optional i64 TranslationType;
}

struct CLAOriginalLanguageStruct {
	// the language name from video arch subtitle management system
	1: optional string Lang;
	// map<lang, language_id> is maintained by vcloud. https://bytedance.feishu.cn/docs/doccnL3XBAihnFwawShre7pjgyh
	2: optional i64 LanguageId;
	// the language code from lab which aligned with translation language
	3: optional string LanguageCode;
	// whether the original caption supports realtime translation
	4: optional bool CanTranslateRealtime;
	// the exact original caption type used for event tracking
	5: optional enum.CLAOriginalCaptionType OriginalCaptionType;
	// indicating if the video has burn_in caption
	6: optional bool IsBurninCaption;
	// skip translation language check for real-time translation
	7: optional bool CanTranslateRealtimeSkipTranslationLangCheck;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.Cla.OriginalLanguageInfo.FirstSubtitleTime - start time of first subtitle
	8: optional i64 FirstSubtitleTime;
}

struct CaptionControlInfoStruct {
	1: optional bool ShouldShowControlWhenCollapsed;
	2: optional bool ShouldShowControlWhenExpanded;
	3: optional bool ShouldShowCaptionOn;
	4: optional bool ShouldShowCaptionOff;
	5: optional bool TooltipHideEnabled;
}

struct DnsResultList {
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.VideoPlay.PlayAddrDnsResult.DnsResult - DNS解析结果
	1: optional list<string> DnsResult;
}

struct DubbingVideoStruct {
	1: optional string Lang;
	// map<language, language_id> is maintained by vcloud. https://bytedance.feishu.cn/docs/doccnL3XBAihnFwawShre7pjgyh
	2: optional i64 LanguageId;
	// M/F/mixed
	3: optional string VoiceType = "mixed";
	4: optional common.UrlStruct PlayAddr;
	5: optional common.UrlStruct PlayAddrH265;
	// used to replace PlayAddrByteVC1
	6: optional common.UrlStruct PlayAddrByteVC1;
}

struct BitrateInfoStruct {
	// 档位名称, 与切换列表内容保持一致
	1: optional string GearName;
	// 视频清晰度, 请求视频需要传这个参数
	2: optional i32 QualityType;
	// 码率 bps
	3: optional i32 Bitrate;
	// 编码格式
	4: optional string CodecType;
	// 视频播放地址
	5: optional common.UrlStruct PlayAddr;
	6: optional common.UrlStruct PlayAddrH265;
	// bytevc1 video url struct
	7: optional common.UrlStruct PlayAddrByteVC1;
	// for CLA dubbing videos
	8: optional list<DubbingVideoStruct> DubInfos;
	// HDR type : Normal-0, HLG-1, PQ-2
	9: optional string HdrType;
	// HDR bit depth
	10: optional string HdrBit;
	// Video attachment information, json string, including information such as video first frame offset and VR playback parameters.
	11: optional string VideoExtra;
	// Video Format，mp4/dash
	12: optional string Format;
	// frame rate
	13: optional i64 FPS;
	// ABR bitrate
	14: optional i64 Bandwidth;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.VideoPlay.BitrateInfos.FidProfileLabels - FileID/Ladder level Video Portrait
	15: optional string FidProfileLabels;
}

struct TextLabelInsetInfoStruct {
	1: optional i32 Top;
	2: optional i32 Trailing;
	3: optional i32 Bottom;
	4: optional i32 Leading;
}

struct CLACaptionAppearance {
	// bg_color
	1: optional string BackgroundColour;
	// bg_corner_radius
	2: optional double BackgroundCornerRadius;
	3: optional i32 TextLabelAlignment;
	4: optional list<i32> TextLabelInsets;
	5: optional i32 CaptionTextSize;
	6: optional string CaptionTextColor;
	7: optional double CaptionTextStrokeWidth;
	8: optional string CaptionTextStrokeColor;
	9: optional bool ShouldShowCaptionIcon;
	10: optional bool ShouldShowInstructionText;
	11: optional i32 InstructionTextSize;
	12: optional string InstructionTextColor;
	13: optional double InstructionTextStrokeWidth;
	14: optional string InstructionTextStrokeColor;
	15: optional i32 ExpansionDirection;
	16: optional TextLabelInsetInfoStruct TextLabelInsetInfo;
	17: optional CaptionControlInfoStruct CaptionControlInfo;
}

struct CLAStruct {
	1: optional i32 HasOriginalAudio = 0;
	// -1: EnableAutoCaption; 0: unset(old video); 1:on
	2: optional i32 EnableAutoCaption = 0;
	3: optional CLAOriginalLanguageStruct OriginalLanguageInfo;
	// Video caption(cross language accsiibility) list which will dispatch suggested captions
	4: optional list<CLACaptionStruct> CaptionInfos;
	// caption id for creators to add caption back
	5: optional i64 CreatorEditedCaptionId;
	6: optional CLACaptionPosition Positions;
	7: optional CLACaptionAppearance Appearance;
	// Determine if the original caption needs to be hide
	8: optional bool HideOriginalCaption;
	9: optional enum.CLACaptionsType CaptionsType;
	// Why this item has no captions
	10: optional enum.CLANoCaptionReason NoCaptionReason;
}

struct VideoControlStruct {
	// can I download it
	1: optional bool AllowDownload;
	// match
	2: optional bool AllowDuet;
	// is it possible to catch the camera
	3: optional bool AllowReact;
	// can the current video be stuck by others
	4: optional bool AllowStitch;
	// 0 do not display progress bar, 1 display progress bar
	5: optional i32 ShowProgressBar;
	// 0 can not be dragged, 1 progress bar can be dragged
	6: optional i32 DraftProgressBar;
	// 0 not allowed to share 1 share download 2 share QR code
	7: optional i32 ShareType;
	// unable to download reason type 0 watermark transcoding not completed 1 audit failed
	8: optional i32 PreventDownloadType;
	// true allows dynamic wallpaper, false does not allow dynamic wallpaper
	9: optional bool AllowDynamicWallpaper;
	// 1: timing in progress, 0: timing end // deprecated
	10: optional i32 TimerStatus;
	// if you can use music, go to the music details page
	11: optional bool AllowUseMusic;
}

struct VideoDownloadAddressStruct {
	// 视频下载地址
	1: optional common.UrlStruct DownloadAddr;
	// 明星视频未消音的下载地址
	2: optional common.UrlStruct NewDownloadAddr;
	// 类UI水印地址
	3: optional common.UrlStruct UiAlikeDownloadAddr;
	// caption水印视频下载地址
	4: optional common.UrlStruct CaptionDownloadAddr;
	// 带结尾水印的视频
	5: optional common.UrlStruct DownloadSuffixLogoAddr;
	// Scenario and other customized download address, key includes snapchat, Lite, suffix_ scene...
	6: optional map<string,common.UrlStruct> MiscDownloadAddrs;
	// string of MiscDownloadAddrs
	7: optional string MiscDownloadAddrsStr;
}

struct VideoPlayAddressStruct {
	// 视频播放地址
	1: optional common.UrlStruct PlayAddr;
	// 低码率视频播放地址
	2: optional common.UrlStruct PlayAddrLowbr;
	// H.264 video url struct
	3: optional common.UrlStruct PlayAddrH264;
	4: optional common.UrlStruct PlayAddrH265;
	// bytevc1 video url struct
	5: optional common.UrlStruct PlayAddrByteVC1;
	// dash 播放地址
	6: optional string VideoModel;
}

struct VideoPlayStruct {
	1: optional VideoPlayAddressStruct PlayAddr;
	2: optional VideoDownloadAddressStruct DownloadAddr;
	// 编码格式
	3: optional string CodecType;
	// 视频分辨率 default-原文件 , Ratio; Ratio; 360p
	4: optional string Ratio;
	// whether HDR video from the viewer: 0,1,-1 (-1 means viewer == creator, 0 not HDR, 1 HDR)
	5: optional i32 SourceHDRType;
	// download_addr的视频是否包含动态水印
	6: optional bool HasWatermark;
	// 是否有带结尾水印的视频
	7: optional bool HasDownloadSuffixLogoAddr;
	// cdl_url过期时间，utc时间，和时区无关, 单位具体到秒
	8: optional i64 CdnUrlExpired;
	// 在访问视频地址时，如果是私密视频，会访问源站，且需要提供长短票+cookie。 这里先添加，以免以后feed可能出自己的私密视频。。
	9: optional bool NeedSetToken;
	// 视频 bit_rate 配置下发
	10: optional list<BitrateInfoStruct> BitrateInfos;
	// audio bitrate
	11: optional list<BitrateAudioStruct> BitrateAudioInfos;
	// video format, dash or mp4
	12: optional string Format;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.VideoPlay.VidProfileLabels - Video-Level portrait
	13: optional string VidProfileLabels;
	// Descriptions on tree:
	// ContentModel.Base.Display.VideoSingle.Video.VideoPlay.DidProfileLabels - Device-Level portrait
	14: optional string DidProfileLabels;
	15: optional map<string,DnsResultList> PlayAddrDnsResult;
}

struct VideoSizeStruct {
	1: optional i64 Width;
	2: optional i64 Height;
}

struct VideoSpritesStruct {
	// 雪碧图，较长视频feed使用, only one elem for BigThumbs; BigThumbsupports multi sprites
	1: optional list<BigThumbStruct> BigThumbs;
}

struct VideoTagStruct {
	// 是否是较长视频(1-15min)
	1: optional bool IsLongVideo;
	// Complete transcoding callback
	2: optional bool IsCallBack;
}

struct VideoStruct {
	// content.video_id
	1: optional string VideoId;
	// 视频时长
	2: optional i64 Duration;
	3: optional VideoSizeStruct Size;
	4: optional VideoPlayStruct VideoPlay;
	5: optional VideoTagStruct VideoTag;
	6: optional VideoSpritesStruct VideoSprites;
	// 分发视频的控制字段
	7: optional VideoControlStruct VideoControl;
	// cla info(cross language accessibility)
	8: optional CLAStruct Cla;
	// Video Meta Meta; A map json string: map<Meta; string>
	9: optional string Meta;
}
